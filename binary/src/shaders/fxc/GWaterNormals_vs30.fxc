#include "common_vs_fxc.h"

float RADIUS				: register(c5);

struct VS_INPUT {
	float4 vPos			: POSITION;		// Position
	float4 vTexCoord	: TEXCOORD0;	// Texture coordinates
	float4 ani0 		: TEXCOORD1;		// cursed anisotropy (we have to shove it in the vertex shader)
	float4 ani1 		: TEXCOORD2;		// its joever
	float4 ani2 		: TEXCOORD3;
};

struct VS_OUTPUT {
	float4 projPosSetup	: POSITION;  // Register 0
	float4 coord		: TEXCOORD0; // Register 1
	float3 pos			: TEXCOORD1; // Register 2
	float4x4 proj		: TEXCOORD2; // Registers 3 4 5 6
	float3x3 normal		: NORMAL0;	 // Registers 7 8 9
};

VS_OUTPUT main(const VS_INPUT v) {
	VS_OUTPUT o = (VS_OUTPUT)0;
	
	// Extract real position
	float3 world_pos;
	SkinPosition(0, v.vPos, 0, 0, world_pos);

	// extract normal / right and up
	float3 world_normal = normalize(cEyePos - world_pos);
	float3 right = normalize(cross(world_normal, float3(0, 0, 1)));
	float3 up = cross(world_normal, right);

	// to avoid extrusion calculations (above) being called on CPU, we do them here
	float3 world_pos_offset = -right * (v.vTexCoord.x - 0.5) + up * (v.vTexCoord.y - 0.5);
	world_pos_offset *= (RADIUS * 0.1);

	//float scale_mult = 10.f / data.radius;	// no fucking clue why this works
	//float inv_scale_mult = data.radius / 10.f;	// microoptimization

	// Anisotropy warping
	float dot0 = dot(world_pos_offset, v.ani0.xyz) * v.ani0.w;
	float dot1 = dot(world_pos_offset, v.ani1.xyz) * v.ani1.w;
	float dot2 = dot(world_pos_offset, v.ani2.xyz) * v.ani2.w;
	world_pos_offset += (v.ani0.xyz * dot0 + v.ani1.xyz * dot1 + v.ani2.xyz * dot2);
	world_pos_offset *= RADIUS;
	//world_pos_offset += (v.ani1 * dot1);

	float3 extruded_world_pos = world_pos + world_pos_offset;

	float4 vProjPos = mul(float4(extruded_world_pos, 1), cViewProj);
	//vProjPos.z = dot(float4(extruded_world_pos, 1), cViewProjZ);	// wtf does this even do?

	o.projPosSetup = vProjPos;
	o.coord = v.vTexCoord;
	o.pos = extruded_world_pos;
	o.proj = cViewProj;		// Used in spherical depth
	o.normal = float3x3(
		-right.x, -right.y, -right.z,
		world_normal.x, world_normal.y, world_normal.z,
		-up.x, -up.y, -up.z
	);

	return o;
};