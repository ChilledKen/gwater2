#include "common_ps_fxc.h"

float2 SCR_S		: register(c0);
float RADIUS		: register(c1);
float IOR 			: register(c2);
float REFLECTANCE 	: register(c3);

sampler NORMALS 	: register(s0);
sampler FRAMEBUFFER : register(s1);
samplerCUBE CUBEMAP	: register(s2);
sampler DEPTH		: register(s3);

struct PS_INPUT {
	float2 P 		: VPOS;
	float2 coord	: TEXCOORD0;
	float3 eyepos	: TEXCOORD1;
	float3 pos		: TEXCOORD2;
	float4x4 proj	: TEXCOORD3;
};

#define OFFSET float2(0.5, 0.5)
#define _PI2 6.28318530718
#define IN_COLOR float4(1, 1, 1, 1)

// Assumes that incoming IOR is 1
float fresnelSchlicks(float3 incident, float3 normal, float ior) {
    float r0 = (1.0 - ior) / (1.0 + ior); 
	r0 *= r0;
	float cosX = -dot(incident, normal);
    float x = 1.0 - cosX;
    float ret = r0 + (1.0 - r0) * x * x * x * x * x;

	//ret = (REFLECTANCE + (1.0 - REFLECTANCE) * ret);
    return min(ret, 1);
}

float4 main(const PS_INPUT i) : COLOR {

	// kill pixels outside of sphere
	float2 offset = (i.coord - 0.5) * 2.0;
	float radius2 = dot(offset, offset);
	if (radius2 > 1) discard;

	float3 smoothed_normal = tex2D(NORMALS, (i.P + OFFSET) / SCR_S).xyz;

	// Weight the normals forward, as the only visible part is facing the player
	float3 view_dir = normalize(i.pos - i.eyepos);
	smoothed_normal = normalize(smoothed_normal + view_dir * REFLECTANCE);
	
	// Lighting calculations
	float3 sun_dir = float3(-0.377821, 0.520026, 0.766044);	// TODO: get from map OR get lighting data
	float3 reflected = reflect(view_dir, smoothed_normal);
	float phong = min(pow(max(0, dot(reflected, sun_dir)), 100), 1);
	float fresnel = 0;//fresnelSchlicks(view_dir, smoothed_normal, IOR);
	float3 specular = texCUBE(CUBEMAP, reflected).xyz * fresnel;
	
	bool is_translucent = IN_COLOR.w < 0.9999;	// rounding errors
	float diffuse = is_translucent ? 1.0 : dot(smoothed_normal, sun_dir) * 0.45 + 0.55;
	float absorption_distance = (tex2D(DEPTH, i.P / SCR_S).x * 100 + pow(dot(smoothed_normal, view_dir), 2) * 10) * IN_COLOR.w;
	//pow(dot(smoothed_normal, view_dir), 2)
	float3 absorption = is_translucent ? exp((IN_COLOR.xyz - float3(1, 1, 1)) * absorption_distance) : IN_COLOR.xyz;

	// Calculate refraction vector in 3d space and project it to screen
	float3 uv_offset = smoothed_normal * -RADIUS * IOR;
	float4 uv = mul(float4(i.pos + uv_offset, 1), i.proj); uv.xy /= uv.w;
	float3 refracted = is_translucent ? tex2D(FRAMEBUFFER, float2(uv.x / 2.0 + 0.5, 0.5 - uv.y / 2.0)).xyz : float3(1, 1, 1);
	//float3 refracted = is_translucent ? tex2D(SCREEN, i.P / SCR_S).xyz : float3(1, 1, 1);
	refracted *= (1.0 - fresnel);

	// Calculate final color & return
	float3 final_color = absorption * refracted * diffuse + float3(phong, phong, phong) + specular;
	//return float4(final_color, 1);
	return FinalOutput(float4(final_color, 1), 0, 0, TONEMAP_SCALE_NONE, false, 0);	// For HDR

	return float4(smoothed_normal, 1);
};
/*
	// extracted normal from depth
	float3 view_dir = normalize(i.pos - i.eyepos.xyz);
	float3 bulge_pos = project_pos(i.eyepos.xyz, view_dir, join_depth(tex2D(NORMALS, i.P / SCR_S).xy));
	float3 dx = -ddx(bulge_pos);	// right is reversed
	float3 dy = ddy(bulge_pos);
	
	// Lighting calculations
	float3 sun_dir = float3(-0.377821, 0.520026, 0.766044);	// TODO: get from map OR get lighting data
	float3 reflected = reflect(view_dir, smoothed_normal);
	float phong = min(pow(max(0, dot(reflected, sun_dir)), 100), 1);
	float fresnel = fresnelSchlicks(view_dir, smoothed_normal, IOR);
	float3 specular = texCUBE(CUBEMAP, reflected).xyz * fresnel;
	
	bool is_translucent = i.color.w < 0.9999;	// rounding errors
	float diffuse = is_translucent ? 1.0 : dot(smoothed_normal, sun_dir) * 0.45 + 0.55;
	float absorption_distance = (tex2D(DEPTH, i.P / SCR_S).x * 100 + pow(dot(smoothed_normal, view_dir), 2) * 10) * i.color.w;
	//pow(dot(smoothed_normal, view_dir), 2)
	float3 absorption = is_translucent ? exp((i.color.xyz - float3(1, 1, 1)) * absorption_distance) : i.color.xyz;

	// Calculate refraction vector in 3d space and project it to screen
	float3 uv_offset = i.eyepos.w > RADIUS * 4.0 ? smoothed_normal * -RADIUS * IOR : float3(0, 0, 0);
	float4 uv = mul(float4(i.pos + uv_offset, 1), i.proj); uv.xy /= uv.w;
	float3 refracted = is_translucent ? tex2D(SCREEN, float2(uv.x / 2.0 + 0.5, 0.5 - uv.y / 2.0)).xyz : float3(1, 1, 1);
	//float3 refracted = is_translucent ? tex2D(SCREEN, i.P / SCR_S).xyz : float3(1, 1, 1);
	refracted *= (1.0 - fresnel);

	// Calculate final color & return
	float3 final_color = absorption * refracted * diffuse + float3(phong, phong, phong) + specular;
	//return float4(final_color, 1);
	return FinalOutput(float4(final_color, 1), 0, 0, TONEMAP_SCALE_NONE, false, 0);	// For HDR
	
	//return float4(smoothed_normal, 1);
};*/