//  DYNAMIC: "OPAQUE" "0..1"

#include "common_ps_fxc.h"

float2 SCR_S		: register(c0);
float RADIUS		: register(c1);
float IOR 			: register(c2);
float REFLECTANCE 	: register(c3);
float4 COLOR2		: register(c4);

sampler NORMALS 	: register(s0);
sampler FRAMEBUFFER : register(s1);
sampler CUBEMAP		: register(s2);
sampler DEPTH		: register(s3);

struct PS_INPUT {
	float2 P 		: VPOS;
	float2 coord	: TEXCOORD0;
	float3 eyepos	: TEXCOORD1;
	float3 pos		: TEXCOORD2;
	float4x4 proj	: TEXCOORD3;
};

#define OFFSET float2(0.5, 0.5)
#define SUN_DIR float3(-0.377821, 0.520026, 0.766044)	// TODO: get from map OR get lighting data

bool is_zero(float3 i) {
	return i.x == 0 && i.y == 0 && i.z == 0;
}

// Assumes that incoming IOR is 1
float fresnel_approx(const float3 incident, const float3 normal) {
	float fresnel = saturate(dot(normal, incident));
	return pow(1.0 - fresnel, 5);
}

float4 main(const PS_INPUT i) : COLOR {

	// kill pixels outside of sphere
	float2 offset = (i.coord - 0.5) * 2.0;
	float radius2 = dot(offset, offset);
	if (radius2 > 1) discard;

	float3 smoothed_normal = tex2D(NORMALS, (i.P + OFFSET) / SCR_S).xyz;
	// Weight the normals forward, as the only visible part is facing the player
	float3 view_dir = normalize(i.pos - i.eyepos);
	smoothed_normal = normalize(smoothed_normal + view_dir * dot(-view_dir, smoothed_normal) * REFLECTANCE);
	
	// Primary lighting calculations
	float3 reflected = reflect(view_dir, smoothed_normal);
	float phong = min(pow(max(0, dot(reflected, SUN_DIR)), 100), 1);
	float fresnel = is_zero(smoothed_normal) ? 0 : fresnel_approx(-view_dir, smoothed_normal);
	float3 specular = texCUBE(CUBEMAP, reflected).xyz * fresnel;
	//float3 specular = pow(texCUBE(CUBEMAP, reflected).xyz, 1.0 / 2.2) * 3.5 * fresnel;

	// Secondary lighting calculations
	
#if OPAQUE // Opaque
	float3 absorption = COLOR2.xyz;	// Technically diffuse
	float refracted = dot(smoothed_normal, SUN_DIR) * 0.45 + 0.55;
	
#else // Translucent
	float absorption_distance = (tex2D(DEPTH, i.P / SCR_S).x * 100 - dot(smoothed_normal, view_dir) * 10) * COLOR2.w;
	float3 absorption = exp((COLOR2.xyz - float3(1, 1, 1)) * absorption_distance);	// Beers law

	// Calculate refraction vector in 3d space and project it to screen
	float3 uv_offset = smoothed_normal * -RADIUS * IOR;
	float4 uv = mul(float4(i.pos + uv_offset, 1), i.proj); uv.xy /= uv.w;
	float3 refracted = tex2D(FRAMEBUFFER, float2(uv.x / 2.0 + 0.5, 0.5 - uv.y / 2.0)).xyz * (1.0 - fresnel);
#endif

	// Calculate final color & return
	float3 final_color = absorption * refracted + float3(phong, phong, phong) + specular;
	//float3 final_color = absorption * refracted + specular;
	return FinalOutput(float4(final_color, 1), 0, 0, TONEMAP_SCALE_NONE);	// For HDR
};