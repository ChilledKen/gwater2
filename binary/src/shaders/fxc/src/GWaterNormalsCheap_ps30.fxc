float RADIUS				: register(c0);

struct PS_INPUT {
	float2 P 		: VPOS;
	float2 coord	: TEXCOORD0;
	float4 pos  	: TEXCOORD1;
	float3x3 normal	: NORMAL0;
};

struct PS_OUTPUT {
	float4 rt0		: COLOR0;
	float4 rt1      : COLOR1;
};

PS_OUTPUT main(const PS_INPUT i) {
	float2 offset = (i.coord - 0.5) * 2.0;

	// kill pixels outside of sphere
	float radius2 = dot(offset, offset);
	if (radius2 > 1) discard;

	// Calculate normal from texture coords
	float bulge = sqrt(1 - radius2);
	float3 world_normal = mul(float3(offset.x, bulge, offset.y), i.normal);

	// Depth information for normals smoothing
	float2 uvdx = ddx(i.coord);
	float2 uvdy = ddy(i.coord);
	float uvdmax = 1.0 / sqrt(max(dot(uvdx, uvdx), dot(uvdy, uvdy)));

	// Output colors to rendertargets
	PS_OUTPUT o = (PS_OUTPUT)0;
	o.rt0 = float4(world_normal, 1);
	o.rt1 = float4(uvdmax, i.pos.w - bulge * RADIUS, 0, 1);

	return o;
};