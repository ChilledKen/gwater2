//  STATIC: "DEPTH"					"0..1"

float RADIUS				: register(c0);

struct PS_INPUT {
	float2 P 			: VPOS;
	float4 coord		: TEXCOORD0;
	float3 pos			: TEXCOORD1;
	float3 eye_pos		: TEXCOORD2;
	float4x4 proj		: TEXCOORD3;
	float3x3 normal		: NORMAL0;	
};

struct PS_OUTPUT {
	float4 rt0		 : COLOR0;
//#if DEPTH
	//float depth	 : DEPTH0;
//#endif
};

PS_OUTPUT main(const PS_INPUT i) {
	float2 offset = (i.coord - 0.5) * 2.0;

	// kill pixels outside of sphere
	float radius2 = dot(offset, offset);
	if (radius2 > 1) discard;

	// Calculate normal from texture coords
	float bulge = sqrt(1 - radius2);
	float3 world_normal = normalize(mul(float3(offset.x, bulge, -offset.y), i.normal));

	// Depth calculations
	//float4 bulge_pos = mul(float4(i.pos.xyz + i.normal[1] * bulge * RADIUS, 1), i.proj);

	// Output colors to rendertargets
	PS_OUTPUT o = (PS_OUTPUT)0;
	o.rt0 = float4(world_normal, 1);
	//o.rt1 = float4(uvdmax, i.pos.w - bulge * RADIUS, 0, 1);
	//o.depth = max(bulge_pos.z / bulge_pos.w, 0.03);	// 0.03 = default znear plane

	return o;
};